@page "/sistema/acceso/panel"
@using System.Net.Http.Json
@using Billetera.Shared.DTOS
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Acceso al Sistema</PageTitle>

<link href="css/loginadmin.css" rel="stylesheet" />

<div class="login-container">
    <div class="login-card">
        <h3 class="login-title">Acceso Restringido</h3>

        <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label for="password">Clave de Acceso</label>
                <InputText id="password"
                           type="password"
                           class="form-control"
                           @bind-Value="loginModel.Password"
                           placeholder="Ingrese la clave"
                           autocomplete="off" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }

            <button type="submit" class="btn-submit" disabled="@isLoading">
                @if (isLoading)
                {
                    <span>Verificando...</span>
                }
                else
                {
                    <span>Acceder</span>
                }
            </button>
        </EditForm>
    </div>
</div>

@code {
    private UsuariosDTO.LoginAdmin loginModel = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            // Llamar a la API de login admin
            var response = await Http.PostAsJsonAsync("api/usuarios/admin/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginAdminResponse>();

                if (result != null && result.EsAdmin)
                {
                    // Guardar el estado de admin en sessionStorage
                    await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "isAdmin", "true");
                    await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "adminLoginTime", DateTime.Now.ToString("o")); // Formato ISO

                    // Esperar un momento para asegurar que se guardó
                    await Task.Delay(100);

                    // Redirigir al panel de administración SIN forceLoad
                    Navigation.NavigateTo("/admin/dashboard", false);
                }
                else
                {
                    errorMessage = "Acceso denegado";
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();

                if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    errorMessage = "Clave de acceso incorrecta";
                }
                else
                {
                    errorMessage = "Error al procesar la solicitud";
                }
            }
        }
        catch (HttpRequestException)
        {
            errorMessage = "Error de conexión con el servidor";
        }
        catch (Exception ex)
        {
            errorMessage = "Error inesperado al iniciar sesión";
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    // Clase para mapear la respuesta del API
    private class LoginAdminResponse
    {
        public string Mensaje { get; set; } = string.Empty;
        public bool EsAdmin { get; set; }
    }
}